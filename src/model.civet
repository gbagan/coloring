import { alphabeticalColoring, Coloring, customColoring, decreasingDegreeColoring, dsatur, indSetColoring } from "./coloring.civet"
import { Graph, initialGraphs, toAdjGraph } from "./graph.civet"

alphabet := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

export type CustomAlgo =
  type: "custom"
  ordering: number[]

export type Algo = { type: "alpha" | "decdegree" | "indset" | "dsatur" } | CustomAlgo

export type Result =
  algorithm: Algo
  coloring: Coloring
  nbColors: number
  showNbColors: boolean

export type State =
  selectedAlgorithm: Algo
  results: Result[]
  currentStep: number
  selectedResultIndex: number
  graphs: Graph[]
  selectedGraphIdx: number
  dialogContent: string

export initState: State :=
  selectedAlgorithm: {type: "alpha"}
  results: []
  currentStep: 0
  selectedResultIndex: 0
  graphs: initialGraphs
  selectedGraphIdx: 0
  dialogContent: ""

function runColoring(graph: Graph, algo: Algo): Coloring | null
  adjGraph := toAdjGraph graph
  switch algo.type
    "alpha" alphabeticalColoring(adjGraph)
    "decdegree" decreasingDegreeColoring(adjGraph)
    "dsatur" dsatur adjGraph
    "indset" indSetColoring adjGraph
    else customColoring adjGraph, (algo as CustomAlgo).ordering

export runBiasedColoring := (idx: number, graph: Graph, algo: Algo) =>
  if idx === 1 && algo.type === "decdegree"
    customColoring toAdjGraph(graph), [11, 10, 1, 9, 8, 6, 3, 0, 7, 5, 2, 4]
  else if idx === 1 && algo.type === "indset"
    customColoring toAdjGraph(graph), [11, 10, 7, 4, 1, 6, 8, 2, 9, 5, 3, 0]
  else
    runColoring(graph, algo)

export orderingToString := (ordering: number[]) => ordering.map(alphabet[&]).join("")

export function stringToOrdering(text: string): number[] | null
  a := "A".charCodeAt(0)
  z := "Z".charCodeAt(0)
  text = text.toUpperCase();
  n := text.length
  res := []
  for i .= 0; i < n; i++
    code := text.charCodeAt i
    if code < a || code > z
      return null
    res.push(code - a)
  res

export isValidOrdering := (ordering: number[]) =>
  ordering.toSorted((a, b) => a - b).every((i, j) => i === j)