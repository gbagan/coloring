import { replicate } from './util.civet'
import { createMemo, Component, batch } from 'solid-js'
import { createStore, produce } from "solid-js/store"
import Card from './components/Card.civet'
import Config from './components/Config.civet'
import GraphView from './components/GraphView.civet'
import { Algo, initState, isValidOrdering, runBiasedColoring, stringToOrdering } from './model.civet'
import { colors } from './colors.civet'
import { Edge, nbVertices, Position } from './graph.civet'
import * as G from './graph.civet'
import toast, { Toaster } from 'solid-toast'

App: Component := =>
  let importDialog!: HTMLDialogElement

  [state, setState] := createStore(initState)

  graph := => state.graphs[state.selectedGraphIdx]

  partialColoring := createMemo =>
    g := graph()
    colors := replicate(g.layout.length, -1)
    coloring := state.results[state.selectedResultIndex]?.coloring ?? []
    m := Math.min(coloring.length, state.currentStep)
    for i .= 0; i < m; i++
      colors[coloring[i].vertex] = coloring[i].color
    colors

  setGraph := (idx: number) =>
    setState produce (state) =>
      state.selectedGraphIdx = idx
      state.results = []
      state.selectedAlgorithm = { type: "alpha" }
      state.selectedResultIndex = 0
      state.currentStep = 0

  setAlgo := (type: string) =>
    setState produce (state) =>
      state.currentStep = 0
      state.selectedAlgorithm =
        if type === "custom"
        then { type: "custom", ordering: [0...graph().layout.length] }
        else { type: type } as Algo

  setCustomOrdering := (text: string) =>
    ordering := stringToOrdering(text);
    if ordering !== null
      setState "selectedAlgorithm", { type: "custom", ordering }

  compute := () =>
    algo := state.selectedAlgorithm
    if  algo.type === "custom" && !isValidOrdering(algo.ordering)
      return
    coloring := runBiasedColoring state.selectedGraphIdx, graph(), state.selectedAlgorithm
    if coloring === null
      return
    res := {
      algorithm: state.selectedAlgorithm
      coloring
      nbColors: 1 + (Math.max(...coloring.map(&.color)) ?? -1)
      showNbColors: false
    }
    batch =>
      setState "results", (results) => [res, ...results].slice(0, 5)
      setState "selectedResultIndex", 0
      setState "currentStep", 0

  showNbColors := =>
    if state.currentStep === nbVertices(graph()) && state.results.length > 0
      setState "results", state.selectedResultIndex, "showNbColors", true

  previousStep := =>
    setState "currentStep", (step) => Math.max(0, step - 1)

  nextStep := =>
    batch =>
      setState "currentStep", (step) => Math.min(nbVertices(graph()), step + 1)
      showNbColors()

  finishColoring := =>
    batch =>
      setState("currentStep", nbVertices(graph()))
      showNbColors()

  setResultIndex := (idx: number) =>
    setState produce (state) =>
      state.selectedResultIndex = idx
      if state.results[idx].showNbColors
        state.currentStep = nbVertices graph()
      else
        state.currentStep = 0

  saveGraph := =>
    idx := state.selectedGraphIdx
    if idx < 5
      return
    json := JSON.stringify graph()
    window.localStorage.setItem `coloring-graph-${idx}`, json
    toast.success "Le graphe a été sauvegardé sur votre machine"

  openImportDialog := =>
    navigator.clipboard
      .readText()
      .then((text) =>
        setState "dialogContent", text
      ).catch(() =>
        setState "dialogContent", ""
      ).finally(() =>
        importDialog.showModal();
      )

  importGraph := =>
    json := state.dialogContent
    graph := G.jsonToGraph json
    if graph === null
      toast.error "Le texte que vous avez entré ne représente pas un graph valide"
    else
      setState "graphs", state.selectedGraphIdx, graph
    importDialog.close()

  exportGraph := () =>
    navigator.clipboard.writeText JSON.stringify graph()
    toast.success("Le graphe a été copié dans le presse-papier")

  configActions := {
    setGraph
    setAlgo
    setCustomOrdering
    compute
    previousStep
    nextStep
    finishColoring
    setResultIndex
    saveGraph
    openImportDialog
    exportGraph
  }

  addVertex := (pos: Position) =>
    setState "graphs", state.selectedGraphIdx, (g) => G.addVertex(g, pos)

  moveVertex := (idx: number, pos: Position) =>
    setState "graphs", state.selectedGraphIdx, "layout", idx, pos

  addEdge := (u: number, v: number) =>
    setState "graphs", state.selectedGraphIdx, (g) => G.addEdge(g, u, v)

  removeVertex := (idx: number) =>
    setState "graphs", state.selectedGraphIdx, (g) => G.removeVertex(g, idx)

  removeEdge := (edge: Edge) =>
    setState "graphs", state.selectedGraphIdx, (g) => G.removeEdge(g, edge)

  clearGraph := =>
    setState "graphs", state.selectedGraphIdx, { layout: [], edges: [] }

  reinitGraph := () =>
    setState "graphs", state.selectedGraphIdx, G.genGraph(state.selectedGraphIdx)


  graphViewActions := {
    addVertex
    moveVertex
    addEdge
    removeVertex
    removeEdge
    clearGraph
    reinitGraph
  }

  // view
  <div class="flex flex-row justify-around items-start">
    <Toaster position="top-right" />
    <div class="p-6 bg-white border border-gray-200 rounded-lg shadow">
      <GraphView
        graph=graph()
        colors=partialColoring()
        showLetters={nbVertices(graph()) <= 26}
        {...graphViewActions}
      />
    <Card title="Ordre des couleurs">
      <div class="w-32">
        <svg viewBox="0 0 40 200">
          {colors.map (color, i) =>
            <>
              <rect x="0" y={i * 20} width="20" height="20" class=color />
              <text x="24" y={i * 20 + 16} class="graphtext">{i + 1}
          }
    <Config
      selectedAlgorithm={state.selectedAlgorithm}
      currentStep={state.currentStep}
      results={state.results}
      selectedResultIndex={state.selectedResultIndex}
      showLetters={nbVertices(graph()) <= 26}
      {...configActions}
    />
    <dialog ref=importDialog class="dialog">
      <div class="dialog-title">Importer un graphe
      <div class="dialog-body" >
        <textarea
          class="textarea"
          cols="100"
          rows="20"
          onChange={(e) => setState("dialogContent", e.currentTarget.value)}
        > {state.dialogContent}
      <div class="dialog-buttons">
        <button class="btn rounded-lg" onClick={() => importDialog.close()}>Annuler
        <button class="btn rounded-lg" autofocus onClick={importGraph}>OK

export default App